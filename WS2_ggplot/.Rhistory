library(knitr)
library(tidyverse)
library(ggplot2)
library(DESeq2)
library(ape)
library(MicrobeR)
library(reshape)
setwd("/Volumes/turnbaughlab/qb3share/janice/MGEP_testrun/testrun_outputs/")
#Total reads, reads post fastp, mapped and assigned to features
## getting fastp reads
err <- list.files("mgs_logs/", pattern = ".err")
err.l <- lapply(err, function(x) read.delim(paste0("mgs_logs/",x)))
names(err.l) <- err
err.list <- as.data.frame(t(sapply(names(err.l), simplify = T, function(x){
df <- err.l[[x]]
data <-data.frame("mean_before" = mean(
as.numeric(gsub("total reads: ", "", df[,1][grep("before filtering", df[,1], ignore.case=TRUE)+1]))),
"mean_after" = mean(
as.numeric(gsub("total reads: ", "", df[,1][grep("after filtering", df[,1], ignore.case=TRUE)+1])))
)
data <- data %>% mutate("pct_retained" = data[,"mean_after"]/data[,"mean_before"])
}
)))
## give average reads retained after adapter trimming
mean(do.call(rbind, err.list[,3])[,1])
err.list
setwd("/Volumes/turnbaughlab/qb3share/janice/MGEP_testrun/testrun_outputs/")
STAR.log <- lapply(list.files("mgs_logs/", pattern = ".final.out"), function(x){
read.delim(paste0("mgs_logs/",x), as.is = T)})
names(STAR.log) <- list.files("mgs_logs/", pattern = ".final.out")
STAR.qc <- sapply(names(STAR.log), function(x){
df <- STAR.log[[x]]
data <- data.frame("input_reads" = as.numeric(df[grepl("Number of input reads", as.character(df[,1])),][,2]),
"mapped_reads" = as.numeric(df[grepl("Uniquely mapped reads number", as.character(df[,1])) ,][,2]),
"pct_mapped" = as.numeric(gsub("%", "",
as.character(df[grepl("Uniquely mapped reads %", as.character(df[,1])) ,][,2]))))
data}) %>% t() %>% as.data.frame()
mean(do.call(rbind, STAR.qc$pct_mapped)[,1])
rm(df)
rm(data)
subread.fc <- lapply(names(err.l), function(x){
df <- err.l[[x]]
data <- data.frame("Total_alignments" = as.numeric(
do.call(cbind, strsplit(as.character(df[grepl("Total alignments", df[,1]),]), "\\s+"))[5,]),
"Successful_alignments" = as.numeric(
do.call(cbind, strsplit(as.character(df[grepl("Successfully assigned alignments", df[,1]),]), "\\s+"))[6,]),
"pct_success" = do.call(cbind, strsplit(
as.character(df[grepl("Successfully assigned alignments", df[,1]),]), "\\s+"))[7,])
})
names(subread.fc) <- names(err.l)
subread.fc <- do.call(rbind, subread.fc)
subread.fc
err.l;
err.l
err.list
setwd("/Volumes/turnbaughlab/qb3share/janice/MGEP_testrun/testrun_outputs/")
#Total reads, reads post fastp, mapped and assigned to features
## getting fastp reads
err <- list.files("mgs_logs/", pattern = ".err")
err.l <- lapply(err, function(x) read.delim(paste0("mgs_logs/",x)))
names(err.l) <- err
err.list <- as.data.frame(t(sapply(names(err.l), simplify = T, function(x){
df <- err.l[[x]]
data <-data.frame("mean_before" = sum(
as.numeric(gsub("total reads: ", "", df[,1][grep("before filtering", df[,1], ignore.case=TRUE)+1]))),
"mean_after" = sum(
as.numeric(gsub("total reads: ", "", df[,1][grep("after filtering", df[,1], ignore.case=TRUE)+1])))
)
data <- data %>% mutate("pct_retained" = data[,"mean_after"]/data[,"mean_before"])
}
)))
## give average reads retained after adapter trimming
mean(do.call(rbind, err.list[,3])[,1])
err.list
## give average reads retained after adapter trimming
mean(err.list$pct_retained)
class(err.list$pct_retained)
## give average reads retained after adapter trimming
apply(err.list, 2, unlist)
## give average reads retained after adapter trimming
err.list<-apply(err.list, 2, unlist)
mean(err.list$pct_retained)
rr.list$pct_retained
err.list$pct_retained
err.list
class(err.list)
setwd("/Volumes/turnbaughlab/qb3share/janice/MGEP_testrun/testrun_outputs/")
#Total reads, reads post fastp, mapped and assigned to features
## getting fastp reads
err <- list.files("mgs_logs/", pattern = ".err")
err.l <- lapply(err, function(x) read.delim(paste0("mgs_logs/",x)))
names(err.l) <- err
err.list <- as.data.frame(t(sapply(names(err.l), simplify = T, function(x){
df <- err.l[[x]]
data <-data.frame("mean_before" = sum(
as.numeric(gsub("total reads: ", "", df[,1][grep("before filtering", df[,1], ignore.case=TRUE)+1]))),
"mean_after" = sum(
as.numeric(gsub("total reads: ", "", df[,1][grep("after filtering", df[,1], ignore.case=TRUE)+1])))
)
data <- data %>% mutate("pct_retained" = data[,"mean_after"]/data[,"mean_before"])
}
)))
## give average reads retained after adapter trimming
err.list<-apply(err.list, 2, unlist) %>% as.data.frame()
mean(err.list$pct_retained)
err.list
setwd("/Volumes/turnbaughlab/qb3share/janice/MGEP_testrun/testrun_outputs/")
list.files("mgs_logs/", pattern = ".err")
list.files("mgs_logs/", pattern = ".err", full.names = TRUE)
x="mgs_logs//SPFized_Mouse1_I1T.err"
readLines(x)
readLines(x) %>% grep("before filtering")
readLines(x) %>% grep("before filtering", .)
readLines(x) %>% grep("before filtering", ., value=TRUE)
readLines(x) %>% grep("before filtering", .)
readLines(x) %>% (grep("before filtering", .)+1)
tmp<-readLines(x)
tmp
grep("reads before", tmp)
tmp
grep("before filtering", tmp)
tograb<-grep("before filtering", tmp)
tograb+1
tograb<-tograb+1
tmp[tograb]
tmp<-tmp[tograb]
tmp
names(tmp)<-gsub(":..+","", tmp)
tmp
tmp<-readLines(x)
tmp
x
basename(x)
basename(x) %>% gsub("\\.err", .)
basename(x) %>% gsub("\\.err", "", .)
grep("Read1 before filtering", tmp)
grep("Read1 before filtering", tmp)+1
tmp[grep("Read1 before filtering", tmp)+1]
tmp[grep("Read1 before filtering", tmp)+1] %>% gsub("total reads:", "", .)
tmp[grep("Read1 before filtering", tmp)+1] %>% gsub("total reads: ", "", .)
tmp[grep("Read1 before filtering", tmp)+1] %>% gsub("total reads: ", "", .) %>% as.numeric() %>% sum()
tibble(
SampleID=basename(x) %>% gsub("\\.err", "", .)
Raw_Reads=tmp[grep("Read1 before filtering", tmp)+1] %>% gsub("total reads: ", "", .) %>% as.numeric() %>% sum()
After_FastP=tmp[grep("Read1 after filtering", tmp)+1] %>% gsub("total reads: ", "", .) %>% as.numeric() %>% sum()
)
tibble(
SampleID=basename(x) %>% gsub("\\.err", "", .),
Raw_Reads=tmp[grep("Read1 before filtering", tmp)+1] %>% gsub("total reads: ", "", .) %>% as.numeric() %>% sum(),
After_FastP=tmp[grep("Read1 after filtering", tmp)+1] %>% gsub("total reads: ", "", .) %>% as.numeric() %>% sum()
)
list.files("mgs_logs/", pattern = ".err", full.names = TRUE) %>%
lapply(., function(x){
tmp<-readLines(x)
tibble(
SampleID=basename(x) %>% gsub("\\.err", "", .),
Raw_Reads=tmp[grep("Read1 before filtering", tmp)+1] %>% gsub("total reads: ", "", .) %>% as.numeric() %>% sum(),
After_FastP=tmp[grep("Read1 after filtering", tmp)+1] %>% gsub("total reads: ", "", .) %>% as.numeric() %>% sum()
)
})
list.files("mgs_logs/", pattern = ".err", full.names = TRUE) %>%
lapply(., function(x){
tmp<-readLines(x)
tibble(
SampleID=basename(x) %>% gsub("\\.err", "", .),
Raw_Reads=tmp[grep("Read1 before filtering", tmp)+1] %>% gsub("total reads: ", "", .) %>% as.numeric() %>% sum(),
After_FastP=tmp[grep("Read1 after filtering", tmp)+1] %>% gsub("total reads: ", "", .) %>% as.numeric() %>% sum()
)
}) %>%
do.call(bind_rows, .) %>%
mutate(PercentKept_FastP=100*(After_FastP/Raw_Reads))
FastP.qc<-
list.files("mgs_logs/", pattern = ".err", full.names = TRUE) %>%
lapply(., function(x){
tmp<-readLines(x)
tibble(
SampleID=basename(x) %>% gsub("\\.err", "", .),
Raw_Reads=tmp[grep("Read1 before filtering", tmp)+1] %>% gsub("total reads: ", "", .) %>% as.numeric() %>% sum(),
After_FastP=tmp[grep("Read1 after filtering", tmp)+1] %>% gsub("total reads: ", "", .) %>% as.numeric() %>% sum()
)
}) %>%
do.call(bind_rows, .) %>%
mutate(PercentKept_FastP=100*(After_FastP/Raw_Reads))
setwd("/Volumes/turnbaughlab/qb3share/janice/MGEP_testrun/testrun_outputs/")
FastP.qc<-
list.files("mgs_logs/", pattern = ".err", full.names = TRUE) %>%
lapply(., function(x){
tmp<-readLines(x)
tibble(
SampleID=basename(x) %>% gsub("\\.err", "", .),
Raw_Reads=tmp[grep("Read1 before filtering", tmp)+1] %>% gsub("total reads: ", "", .) %>% as.numeric() %>% sum(),
After_FastP=tmp[grep("Read1 after filtering", tmp)+1] %>% gsub("total reads: ", "", .) %>% as.numeric() %>% sum()
)
}) %>%
do.call(bind_rows, .) %>%
mutate(PercentKept_FastP=100*(After_FastP/Raw_Reads))
list.files("mgs_logs/", pattern = ".final.out", full.names = TRUE)
x="mgs_logs//SPFized_Mouse1_I5TLog.final.out"
x
readLines(x)
read_tsv(x)
setwd("/Volumes/turnbaughlab/qb3share/janice/MGEP_testrun/testrun_outputs/")
FastP.qc<-
list.files("mgs_logs/", pattern = ".err", full.names = TRUE) %>%
lapply(., function(x){
tmp<-readLines(x)
tibble(
SampleID=basename(x) %>% gsub("\\.err", "", .),
FastP_in=tmp[grep("Read1 before filtering", tmp)+1] %>% gsub("total reads: ", "", .) %>% as.numeric() %>% sum(),
FastP_out=tmp[grep("Read1 after filtering", tmp)+1] %>% gsub("total reads: ", "", .) %>% as.numeric() %>% sum()
)
}) %>%
do.call(bind_rows, .) %>%
mutate(FastP_lost=100*(After_FastP/Raw_Reads))
tmp
setwd("/Volumes/turnbaughlab/qb3share/janice/MGEP_testrun/testrun_outputs/")
FastP.qc<-
list.files("mgs_logs/", pattern = ".err", full.names = TRUE) %>%
lapply(., function(x){
tmp<-readLines(x)
tibble(
SampleID=basename(x) %>% gsub("\\.err", "", .),
FastP_in=tmp[grep("Read1 before filtering", tmp)+1] %>% gsub("total reads: ", "", .) %>% as.numeric() %>% sum(),
FastP_out=tmp[grep("Read1 after filtering", tmp)+1] %>% gsub("total reads: ", "", .) %>% as.numeric() %>% sum()
)
}) %>%
do.call(bind_rows, .) %>%
mutate(FastP_lost=100*(FastP_out/FastP_in))
tmp<-read_tsv(x, col_names=F)
tmp
filter(tmp, grepl("Number of input reads"))$X2
tmp %>% filter(grepl("Number of input reads")) %>% X2
tmp %>% filter(grepl("Number of input reads", X1)) %>% X2
tmp
tmp %>% filter(grepl("Number of input reads"), X1)
tmp %>% filter(grepl("Number of input reads", X1)) %>% pull(X2)
View(tmp)
STAR.qc<-
list.files("mgs_logs/", pattern = ".final.out", full.names = TRUE) %>%
lapply(., function(x){
tmp<-read_tsv(x, col_names=F)
tibble(
SampleID=basename(x) %>% gsub("\\.final\\.out", "", .),
STAR_in=tmp %>% filter(grepl("Number of input reads", X1)) %>% pull(X2) %>% as.numeric(),
STAR_out=tmp %>% filter(grepl("Uniquely mapped reads number", X1)) %>% pull(X2) %>% as.numeric()
)
}) %>%
do.call(bind_rows, .) %>%
mutate(PercentKept_STAR=100*(STAR_in/STAR_out))
View(STAR.qc)
STAR.qc<-
list.files("mgs_logs/", pattern = ".final.out", full.names = TRUE) %>%
lapply(., function(x){
tmp<-read_tsv(x, col_names=F)
tibble(
SampleID=basename(x) %>% gsub("\\.final\\.out", "", .),
STAR_in=tmp %>% filter(grepl("Number of input reads", X1)) %>% pull(X2) %>% as.numeric(),
STAR_out=tmp %>% filter(grepl("Uniquely mapped reads number", X1)) %>% pull(X2) %>% as.numeric()
)
}) %>%
do.call(bind_rows, .) %>%
mutate(PercentKept_STAR=100*(STAR_out/STAR_in))
View(STAR.qc)
setwd("/Volumes/turnbaughlab/qb3share/janice/MGEP_testrun/testrun_outputs/")
.libPaths("")
library(tidyverse)
library(ggplot2)
library(DESeq2)
library(ape)
library(MicrobeR)
library(reshape)
library(gplots)
library(cluster)
library(clusterProfiler)
library(pathfindR)
library(RegEnrich)
features <- readRDS("cds_outputs/features_cds_clean.RDS") %>% column_to_rownames("Geneid")
annotations <- readRDS("/Volumes/turnbaughlab/qb3share/janice/annotations.RDS") %>%
dplyr::select(gene_id, gene_type, gene_name)
annotations <- annotations[!duplicated(annotations),]
metadata<-tibble(SampleID=colnames(features)) %>% separate(SampleID, into = c("colonization", "mouseID", "tissueType"), "_", remove = FALSE) %>% as.data.frame() %>%
column_to_rownames("SampleID") %>%
mutate(group = paste0(colonization, "_", tissueType))
regE_Li <- readRDS("regE_Li.RDS")
head(regE_Li)
?results_score
results_score
object@resScore
regE_Li
head(regE_Li)
regE_Li %>% select(reg, negLogPEnrich, contrast) %>%
mutate(negLogPEnrich = if_else(negLogPEnrich > -log10(0.05), 1, 0))
regE_Li %>% select(reg, negLogPEnrich, contrast) %>%
mutate(negLogPEnrich = if_else(negLogPEnrich > -log10(0.05), 1, 0)) %>%
reshape2::dcast(reg~contrast)
regE_Li %>% select(reg, negLogPEnrich, contrast) %>%
mutate(negLogPEnrich = if_else(negLogPEnrich > -log10(0.05), 1, 0)) %>%
reshape2::dcast(reg~contrast, value.var = negLogPEnrich)
regE_Li %>% select(reg, negLogPEnrich, contrast) %>%
mutate(negLogPEnrich = if_else(negLogPEnrich > -log10(0.05), 1, 0)) %>%
reshape2::dcast(reg~contrast, value.var = "negLogPEnrich")
regE_Li %>% select(reg, negLogPEnrich, contrast) %>%
mutate(negLogPEnrich = if_else(negLogPEnrich > -log10(0.05), 1, 0)) %>%
reshape2::dcast(reg~contrast, value.var = "negLogPEnrich", fill = 0)
regE_Li %>% select(reg, negLogPEnrich, contrast) %>%
mutate(negLogPEnrich = if_else(negLogPEnrich > -log10(0.05), 1, 0)) %>%
reshape2::dcast(reg~contrast, value.var = "negLogPEnrich", fill = 0) %>%
as.data.frame %>% column_to_rownames("reg") %>%
as.matrix()
regE_Li %>% select(reg, negLogPEnrich, contrast) %>%
mutate(negLogPEnrich = if_else(negLogPEnrich > -log10(0.05), 1, 0)) %>%
reshape2::dcast(reg~contrast, value.var = "negLogPEnrich", fill = 0) %>%
as.data.frame %>% column_to_rownames("reg") %>%
as.matrix()%>% UpSet_plot()
regE_Li %>% select(reg, negLogPEnrich, contrast) %>%
mutate(negLogPEnrich = if_else(negLogPEnrich > -log10(0.05), 1, 0)) %>%
reshape2::dcast(reg~contrast, value.var = "negLogPEnrich", fill = 0) %>%
as.data.frame %>% column_to_rownames("reg") %>%
UpSet_plot()
regE_Li %>% select(reg, negLogPEnrich, contrast) %>%
mutate(negLogPEnrich = if_else(negLogPEnrich > -log10(0.05), 1, 0)) %>%
reshape2::dcast(reg~contrast, value.var = "negLogPEnrich", fill = 0) %>%
as.data.frame %>% column_to_rownames("reg") %>%
UpSetR::upset()
pdf(file = "regE_Li_upset.pdf")
regE_Li %>% select(reg, negLogPEnrich, contrast) %>%
mutate(negLogPEnrich = if_else(negLogPEnrich > -log10(0.05), 1, 0)) %>%
reshape2::dcast(reg~contrast, value.var = "negLogPEnrich", fill = 0) %>%
as.data.frame %>% column_to_rownames("reg") %>%
UpSetR::upset()
dev.off()
regE_Li %>% group_by(reg) %>%
summarize(n = n())
regE_Li %>% filter(negLogPEnrich > -log10(0.05)) %>%
group_by(reg) %>%
summarize(n = n())
regE_Li %>% filter(negLogPEnrich > -log10(0.05)) %>%
group_by(reg) %>%
summarize(n = n()) %>%
filter(n == 4)
regE_Li %>% filter(negLogPEnrich > -log10(0.05)) %>%
group_by(reg) %>%
summarize(n = n()) %>%
filter(n .=3)
regE_Li %>% filter(negLogPEnrich > -log10(0.05)) %>%
group_by(reg) %>%
summarize(n = n()) %>%
filter(n >=3)
regE_Li %>% filter(negLogPEnrich > -log10(0.05)) %>%
group_by(reg) %>%
summarize(n = n()) %>%
filter(n =3)
regE_Li %>% filter(negLogPEnrich > -log10(0.05)) %>%
group_by(reg) %>%
summarize(n = n()) %>%
filter(n ==3)
complexCommonReg <- regE_Li %>% filter(negLogPEnrich > -log10(0.05)) %>%
group_by(reg) %>%
summarize(n = n()) %>%
filter(n ==3) %>%
pull(reg)
regE_Li %>% filter(reg %in% complexCommonReg)
regE_Li %>% filter(reg %in% complexCommonReg) %>%
ggplot(aes(x = score, y = negLogPEnrich, col = contrast))+
geom_text()+
theme_classic()
regE_Li %>% filter(reg %in% complexCommonReg) %>%
ggplot(aes(x = score, y = negLogPEnrich, col = contrast))+
geom_text(aes(label = reg))+
theme_classic()
regE_Li %>% filter(reg %in% complexCommonReg) %>%
ggplot(aes(x = contrast, y = score, col = reg))+
geom_point()+
theme_classic()
regE_Li %>% filter(reg %in% complexCommonReg) %>%
ggplot(aes(x = contrast, y = score, col = reg, group = reg))+
geom_point()+
geom_line()+
theme_classic()
regE_Li %>% filter(reg %in% complexCommonReg) %>%
ggplot(aes(x = contrast, y = score, col = reg, group = reg))+
geom_point()+
geom_line()+
theme_classic()+
theme(axis.text.x = element_text(angle = 45))
regE_Li %>% filter(reg %in% complexCommonReg) %>%
ggplot(aes(x = contrast, y = score, col = reg, group = reg))+
geom_point()+
geom_line()+
theme_classic()+
theme(axis.text.x = element_text(angle = 45, hjust = 1))
regE_Li %>% filter(reg %in% complexCommonReg) %>%
ggplot(aes(x = contrast, y = score, col = reg, group = reg))+
geom_point()+
geom_line()+
theme_classic()+
theme(axis.text.x = element_text(angle = 45, hjust = 1))+
ggtitle("common TFs among complex colonizations in liver")
ggsave(file = "commonTFComplexColLi.pdf")
results_topNet(object)
slot(results_enrich(GSEA.res), "allResult") %>% write.csv("GSEA.csv")
getwd()
## uncheck if not installed
## install.packages("ggplot2")
setwd("~/Documents/NUS_R_workshops/IntroToR/WS2_ggplot/")
library(ggplot2)
library(tidyverse)
data  <- read.csv("20200926_dispensing_record.csv")
chronic.meds <- data %>% filter(!medications == "Doxycycline_100mg" &
!medications == "Paracetamol_500mg") %>%
group_by(NRIC) %>%
filter(n() >1) %>%
arrange(names)
View(chronic.meds)
chronic.meds %>% group_by(NRIC, names) %>%
summarize(n = n()) %>%
ggplot(aes(x = n))+
geom_histogram()+
theme_bw()
?geom_bar
